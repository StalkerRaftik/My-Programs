import telebot
from telebot import types
import random
import sys
sys.path.append("../TelegramBot/")
from util import *
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType



bot = telebot.TeleBot("1645621417:AAHGk5coXe87jywqcyhGBHwuljLIm6tm9b0")
userstbl = dotdict(dict()) # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ—Ç–æ–º –ø–µ—Ä–µ–∫–∏–Ω—É –≤ –°–£–ë–î, –∞ —â–∞ –ø–æ–∫–∞ –ø—É—Å—Ç—å –≤ –û–ü —á–∏–ª–ª–∏—Ç


##################################
#### VK AUTHORIZATION FUNCTIONS ##
##################################

def PassSuccessFunc(message):
    id = message.chat.id
    global userstbl
    userstbl.id.password = message.text

    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–î–∞", callback_data='dauth_yes')
    item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='dauth_no')
    markup.add(item1, item2)

    bot.send_message(id, "–í–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É –≤–∞—Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è?", reply_markup=markup)
    userstbl.id.answercor = (None,None,None)
    userstbl.id.dauth = "waiting"


def LoginSuccessFunc(message):
    id = message.chat.id
    global userstbl
    userstbl.id.login = message.text
    bot.send_message(id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    userstbl.id.answercor = (PassSuccessFunc, None, None)

def DAuthSuccessFunc(message):
    global userstbl
    id = message.chat.id

    userstbl.id.dauthkey = message.text
    userstbl.id.answercor = (None,None,None)

def DAuthGetKey(id):
    bot.send_message(id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ")
    userstbl.id.answercor = (DAuthSuccessFunc, None, None)

    while userstbl.id.dauthkey is None:
        continue
    bot.send_message(id, "–ö–æ–¥ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –ï—Å–ª–∏ –≤—ã –µ—â–µ —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Å—å–±—É –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, \
–∑–Ω–∞—á–∏—Ç, –∫–æ–¥ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")
    key = userstbl.id.dauthkey
    userstbl.id.dauthkey = None
    userstbl.id.answercor = (None,None,None)
    return str(key), True

def callback_dAuthification(call):
    global userstbl
    id = call.message.chat.id
    try:
        if call.message:
            if call.data == 'dauth_yes':
                userstbl.id.dauth = True
            elif call.data == 'dauth_no':
                userstbl.id.dauth = False

        if userstbl.id.dauth == True:
            bot.send_message(id, "–í–∞–º –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –í–∫–æ–Ω—Ç–∞–∫—Ç–µ.")
            userstbl.id.vkApi = vk_api.VkApi(userstbl.id.login, userstbl.id.password, auth_handler= lambda: DAuthGetKey(id))
        else:
            bot.send_message(id, "–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É—é—Å—å...")
            userstbl.id.vkApi = vk_api.VkApi(userstbl.id.login, userstbl.id.password, token = "1881bf1af89f62b12f5653e6f061c297f6953dc60c53b55587ca424ea943ce361123cb42629e97b1c0bbc", scope = 2|4|16|64|256|1024|2048|4096|8192|65536|131072|262144|524288|4194304)

        try:
            userstbl.id.vkApi.auth(token_only=True)
            userstbl.id.vkAccess = userstbl.id.vkApi.get_api()
            bot.send_message(id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        except vk_api.AuthError as error_msg:
            print(error_msg)
            return
        print(userstbl.id.vkApi)
        userstbl.id.vkAccess.wall.post(message = "–ë–∞–ª—É—é—Å—å —Å –±–æ—Ç–æ–º")

        try:
            userstbl.id.vkLongpoll = VkLongPoll(userstbl.id.vkApi)
        except vk_api.VkApiError as error_msg:
            print(error_msg)
            return

        for event in userstbl.id.vkLongpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and not event.from_me:
                str = ""

                if event.from_user:
                    str = str(event.user_id)
                elif event.from_chat:
                    str = str(event.user_id) + " –≤ –±–µ—Å–µ–¥–µ " + str(event.chat_id)
                elif event.from_group:
                    str = "–≥—Ä—É–ø–ø–∞ " + str(event.group_id)

                str = str + ":\n" + str(event.text)

                bot.send_message(id, str)


    except Exception as e:
        print(repr(e))


##################################
##### DIALOGUE FUNCTIONS #########
##################################

def callback_inlineDialogue(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')
            #
            # # remove inline buttons
            # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
            #                       reply_markup=None)
            #
            # # show alert
            # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            #                           text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))

##################################
############ MAIN ################
##################################

def WaitingForUserAnswer(message, args):
    successfunc = args[0]
    filterfunc = args[1]
    failfunc = args[2]

    if filterfunc is None:
        successfunc(message)
    elif filterfunc(message):
        successfunc(message)
    elif not failfunc is None:
        failfunc()


def MainKeyboardHandler(message):
    id = message.chat.id
    global userstbl


    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        elif message.text == "–ü–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –í–ö":
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –í–∫–æ–Ω—Ç–∞–∫—Ç–µ:')
            userstbl.id.answercor = (LoginSuccessFunc, None, None)






# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['start'])
def welcome(message):
    id = message.chat.id

    #remembering user
    global userstbl
    if userstbl.get(id) is None:
        userstbl.id = dotdict(dict())
        userstbl.id.answercor = (None, None, None) # Successfunc, Filterfunc, Failfunc - Cortage

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    item3 = types.KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –í–ö")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.".format(
        message.from_user, bot.get_me()),parse_mode='html', reply_markup=markup)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def BotMessageReceived(message):
    global userstbl
    id = message.chat.id

    if userstbl.id is None:
        bot.send_message(id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/start', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    if not userstbl.id.answercor[0] is None:
        WaitingForUserAnswer(message, userstbl.id.answercor)
    else:
        MainKeyboardHandler(message)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def GlobalQueryProc(call):
    id = call.message.chat.id
    global userstbl
    if userstbl is None: return

    if userstbl.id.dauth == "waiting":
        callback_dAuthification(call)
    else:
        callback_inlineDialogue(call)


# RUN
bot.polling(none_stop=True)






