import telebot
from telebot import types
import random
import vk_api

# vk_session = vk_api.VkApi('+79990593881', 'XXXXXXXXXXXXXXXXX')
# vk_session.auth()
#
# vk = vk_session.get_api()
#
# print(vk.wall.post(message='Hello world!'))


bot = telebot.TeleBot("1645621417:AAHGk5coXe87jywqcyhGBHwuljLIm6tm9b0")

vklogin = None
vkpass = None
dauth = None
def GetDataForVkConnection(message):
    id = message.chat.id
    global vklogin
    global vkpass

    if vklogin == True:
        vklogin = message.text
        bot.send_message(id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        vkpass = True
    elif vkpass == True:
        vkpass = message.text
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–î–∞", callback_data='dauth_yes')
        item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='dauth_no')

        markup.add(item1, item2)
        bot.send_message(id, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É –≤–∞—Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è?:", reply_markup=markup)


def MainHandler(message):
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        elif message.text == "–ü–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –í–ö":
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –í–∫–æ–Ω—Ç–∞–∫—Ç–µ:')
            global vklogin
            vklogin = True


def callback_dAuthification(call):
    global dauth
    try:
        if call.message:
            if call.data == 'dauth_yes':
                dauth = True
            elif call.data == 'bad':
                dauth = False
        print(vklogin,vkpass,dauth)
        bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.")

    except Exception as e:
        print(repr(e))

def callback_inlineDialogue(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')
            #
            # # remove inline buttons
            # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
            #                       reply_markup=None)
            #
            # # show alert
            # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
            #                           text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['start'])
def welcome(message):

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    item3 = types.KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –í–ö")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def BotMessageReceived(message):
    global vkpass, vklogin
    if not vkpass is None or not vklogin is None:
        GetDataForVkConnection(message)
    MainHandler(message)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def GlobalQueryProc(call):
    callback_inlineDialogue(call)
    callback_dAuthification(call)


# RUN
bot.polling(none_stop=True)